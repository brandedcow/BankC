#include <stdio.h>
#include <stdlib.h>
#include <sqlenv.h>
#include <string.h>
#include <ctype.h>

const char DB_NAME_KEY[16] = "db2.name";
const char DB_USER_KEY[16] = "db2.username";
const char DB_PASS_KEY[16] = "db2.password";
const char BATCH_KEY[16] = "p2.batch.input";

struct sqlca sqlca;

EXEC SQL BEGIN DECLARE SECTION;
  char db_name[20];
  char db_user[20];
  char db_pass[20];

  char cus_id[10];
  char cus_name[15];
  char cus_gender[2];
  char cus_age[3];
  char cus_pin[4];
  char acc_num[10];
  char acc_id[10];
  char acc_bal[20];
  char acc_type[2];
  char acc_status[2];

  int src_cid;
  int dest_cid;
  int trans_amt;
  int a_total;
  char b_min[4];
  char b_max[4];
  char b_avg[20];
EXEC SQL END DECLARE SECTION;


/**
 * Create a new customer.
 * @param name customer name
 * @param gender customer gender
 * @param age customer age
 * @param pin customer pin
 */
static void newCustomer(char* name, char* gender, char* age, char* pin)
{
  strcpy(cus_name, name);
  strcpy(cus_gender, gender);
  strcpy(cus_age, age);
  strcpy(cus_pin, pin);

  EXEC SQL SELECT ID INTO :cus_id FROM FINAL TABLE
        (INSERT INTO P1.CUSTOMER (NAME, GENDER, AGE, PIN) VALUES (:cus_name,:cus_gender,:cus_age,:cus_pin));

  if (sqlca.sqlcode == 0) {
    printf("\n:: CREATE NEW CUSTOMER #%s - SUCCESS", cus_id);
  } else {
    printf("\n:: CREATE NEW CUSTOMER - FAILURE");
  }
}

/**
 * Authenticate Customer
 * @param id customer id
 * @param pin customer pin
 */
static int authCustomer(char * id, char * pin) {
  strcpy(cus_id, id);
  strcpy(cus_pin, pin);

  EXEC SQL SELECT NAME INTO :cus_name FROM P1.CUSTOMER WHERE (ID=:cus_id AND PIN=:cus_pin);

  if (sqlca.sqlcode == 0) {
    printf("\n:: AUTHENTICATED CUSTOMER #%s - SUCCESS", id);
    return 1;
  } else {
    printf("\n:: AUTHENTICATED CUSTOMER - FAILURE");
    return 0;
  }
}


/**
* Open a new account.
* @param id customer id
* @param type type of account
* @param amount initial deposit amount
*/
static void openAccount(char* id, char* type, char* amount)
{
  strcpy(cus_id, id);
  strcpy(acc_type, type);
  strcpy(acc_bal, amount);

  EXEC SQL SELECT NUMBER INTO :acc_id FROM FINAL TABLE
       (INSERT INTO P1.ACCOUNT (ID, BALANCE, TYPE) VALUES (:cus_id, :acc_bal, :acc_type));

  if (sqlca.sqlcode == 0) {
    printf("\n:: OPEN ACCOUNT #%s - SUCCESS\n",acc_id);
  } else {
    printf("\n:: OPEN ACCOUNT - FAILURE\n");
  }
}

/**
* Close an account.
* @param accNum account number
*/
static void closeAccount(char* accNum)
{
  strcpy(acc_num, accNum);

  EXEC SQL UPDATE P1.ACCOUNT SET BALANCE=0, STATUS='I' WHERE (NUMBER=:acc_num);

  if (sqlca.sqlcode == 0) {
    printf("\n:: CLOSE ACCOUNT #%s - SUCCESS\n",accNum);
  } else {
    printf("\n:: CLOSE ACCOUNT - FAILURE\n");
  }
}

/**
* Deposit into an account.
* @param accNum account number
* @param amount deposit amount
*/
static void deposit(char* accNum, char* amount)
{
  strcpy(acc_num, accNum);
  strcpy(acc_bal, amount);

  EXEC SQL UPDATE P1.ACCOUNT SET BALANCE=BALANCE+:acc_bal WHERE (NUMBER=:acc_num AND STATUS='A');

  if (sqlca.sqlcode == 0) {
    printf("\n:: DEPOSIT INTO ACCOUNT #%s - SUCCESS\n", accNum);
  } else {
    printf("\n:: DEPOSIT - FAILURE\n");
  }
}

/**
 * Withdraw from an account.
 * @param accNum account number
 * @param amount withdraw amount
 */
static void withdraw(char* accNum, char* amount)
{
  strcpy(acc_num, accNum);
  strcpy(acc_bal, amount);

  EXEC SQL UPDATE P1.ACCOUNT SET BALANCE=BALANCE-:acc_bal WHERE (NUMBER=:acc_num AND STATUS='A');

  if (sqlca.sqlcode == 0) {
    printf("\n:: WITHDRAW FROM ACCOUNT #%s - SUCCESS\n", accNum);
  } else {
    printf("\n:: WITHDRAW - FAILURE\n");
    printf("Error number: %d",sqlca.sqlcode);
  }
}

/**
 * Transfer amount from source account to destination account.
 * @param srcAccNum source account number
 * @param destAccNum destination account number
 * @param amount transfer amount
 */
static void transfer(char* srcAccNum, char* destAccNum, char* amount)
{
  strcpy(acc_num, srcAccNum);
  strcpy(acc_id, destAccNum);
  strcpy(acc_bal, amount);

  EXEC SQL UPDATE P1.ACCOUNT SET BALANCE=BALANCE-:acc_bal WHERE (NUMBER=:acc_num AND STATUS='A');

  if (sqlca.sqlcode == 0) {
    EXEC SQL UPDATE P1.ACCOUNT SET BALANCE=BALANCE+:acc_bal WHERE (NUMBER=:acc_id AND STATUS='A');
    if (sqlca.sqlcode == 0) {
      printf("\n:: TRANSFER FROM ACCOUNT #%s TO ACCOUNT #%s - SUCCESS\n", srcAccNum, destAccNum);
    } else {
      printf("\n:: TRANSFER - FAILURE\n");
    }
  } else {
    printf("\n:: TRANSFER - FAILURE\n");
    printf("Error number: %d",sqlca.sqlcode);
  }
}

/**
 * Display account summary.
 * @param cusID customer ID
 */
static void accountSummary(char* cusID)
{
  int first = 1;
  strcpy(cus_id, cusID);
  // check if cus exists

  EXEC SQL DECLARE accCsr CURSOR FOR
        SELECT NUMBER, BALANCE
        FROM P1.ACCOUNT
        WHERE (ID=:cus_id AND STATUS='A');
  EXEC SQL OPEN accCsr;

  for(;;) {
    EXEC SQL FETCH accCsr
        INTO :acc_num, :acc_bal;

    if(sqlca.sqlcode == 0) {
      if (first == 1) {
        printf("\n:: ACCOUNT SUMMARY FOR CUSTOMER #%s - SUCCESS", cusID);
        printf("\n%-6s %-12s","NUMBER","BALANCE");
        first = 0;
      }
      printf("\n%-6s %-12s",acc_num,acc_bal);
    } else {
      break;
    }
    if (sqlca.sqlcode <0) {
      printf("\n:: ACCOUNT SUMMARY - FAILURE");
      break;
    }

  }
  EXEC SQL CLOSE accCsr;

}

/**
 * Display Report A - Customer Information with Total Balance in Decreasing Order.
 */
static void reportA()
{
  int first = 1;
  EXEC SQL DECLARE aCsr CURSOR FOR
        SELECT ID, NAME, AGE, GENDER, BALANCE
        FROM V_TOTAL_BALANCE;
  EXEC SQL OPEN aCsr;
  for(;;){
    EXEC SQL FETCH aCsr
        INTO :cus_id, :cus_name, :cus_age, :cus_gender, :acc_bal;
    if (sqlca.sqlcode == 0) {
      if (first ==1) {
        printf("\n:: REPORT A - SUCCESS");
        printf("\n%-5s %-12s %-4s %-6s %-12s", "ID","NAME","AGE","GENDER", "BALANCE");
        first = 0;
      }
      printf("\n%-5s %-12s %-4s %-6s %-12s",cus_id,cus_name,cus_age,cus_gender,acc_bal);
    } else {
      break;
    }
    if (sqlca.sqlcode < 0) {
      printf("\n:: REPORT A - FAILURE");
      break;
    }
  }
  EXEC SQL CLOSE aCsr;
}

/**
 * Display Report B - Customer Information with Total Balance in Decreasing Order.
 * @param min minimum age
 * @param max maximum age
 */
static void reportB(char* min, char* max)
{
  int first = 1;
  strcpy(b_min, min);
  strcpy(b_max, max);

  EXEC SQL DECLARE bCsr CURSOR FOR
    SELECT AVG(BALANCE)
    FROM V_TOTAL_BALANCE
    WHERE AGE>=:b_min AND AGE<=:b_max;
  EXEC SQL OPEN bCsr;
  for(;;) {
    EXEC SQL FETCH bCsr
      INTO :b_avg;
    if (sqlca.sqlcode == 0) {
      if (first == 1) {
        printf("\n:: REPORT B - SUCCESS");
        printf("\nAverage Total Balance for Age %s to %s: %s",min,max,b_avg);
        first = 0;
      }
    } else {
      break;
    }
    if (sqlca.sqlcode < 0) {
      printf("\n:: REPORT B - FAILURE");
      break;
    }
  }
  EXEC SQL CLOSE bCsr;
}

/**
 * Find Account - verify if account number associated with customer exists
 * @param id customer id
 * @param number account number
 */
static int findAccount(char * id, char * number) {
  strcpy(cus_id, id);
  strcpy(acc_num, number);

  EXEC SQL SELECT NUMBER INTO :acc_id FROM P1.ACCOUNT WHERE (ID=:cus_id AND NUMBER=:acc_num AND STATUS='A');

  if(sqlca.sqlcode == 0) {
    printf("\n:: VERIFYING ACCOUNT - SUCCESS");
    return 1;
  } else {
    printf("\n:: VERIFYING ACCOUNT - FAILURE");
    return 0;
  }
}

/**
 * Retrieve database connection info from properties file.
 * @param filename name of properties file
 */
static void init(char filename[])
{
  // open file
  FILE *fp = fopen(filename, "r");
  // print error if file cannot be opened
  if (fp == NULL)
  {
    printf("Cannot open properties file %s\n", filename);
  }
  else
  {
    char *cur_line = (char *) malloc(256);
    // read each line
    while ( fscanf(fp, "%s", cur_line) != EOF)
    {
      char *line_copy = (char *) malloc(256);
      char *token;
      // copy current line
      strcpy(line_copy, cur_line);
      // tokenize line and save connection values
      while ( (token = strsep(&line_copy, "=")) != NULL )
      {
        if ( strcmp(token, DB_NAME_KEY) == 0)
        {
          token = strsep(&line_copy, "=");
          strcpy(db_name, token);
        }
        else if ( strcmp(token, DB_USER_KEY) == 0)
        {
          token = strsep(&line_copy, "=");
          strcpy(db_user, token);
        }
        else if ( strcmp(token, DB_PASS_KEY) == 0)
        {
          token = strsep(&line_copy, "=");
          strcpy(db_pass, token);
        }
        else
        {
          return;
        }
      }
    }
  }
  // close file
  fclose(fp);
}


/**
* Open database connection.
*/
static void open_db()
{
EXEC SQL CONNECT TO :db_name USER :db_user USING :db_pass;
}

/**
* Close database connection.
*/
static void close_db()
{
EXEC SQL CONNECT RESET;
}

/**
* Test database connection.
*/
static void test_connection()
{
printf(":: TEST - CONNECTING TO DATABASE\n");
open_db();
// check returned sqlcode
if (sqlca.sqlcode == 0)
{
printf(":: TEST - SUCCESSFULLY CONNECTED TO DATABASE\n");
close_db();
printf(":: TEST - DISCONNECTED FROM DATABASE\n");
}
else
{
printf(":: TEST - FAILED CONNECTED TO DATABASE\n");
printf(":::: ERROR SQLCODE %i\n", sqlca.sqlcode);
}
}

/**
* Execute function from batch input.
* @param arr array of strings
* @param size length of p array
*/
void batch_execute(char** arr, int size)
{
if (size < 0)
{
printf("Invalid parameter count");
}
else
{
printf("\n");
if (strcmp(arr[0], "#newCustomer") == 0)
{
 newCustomer(arr[1], arr[2], arr[3], arr[4]);
}
else if (strcmp(arr[0], "#openAccount") == 0)
{
 openAccount(arr[1], arr[2], arr[3]);
}
else if (strcmp(arr[0], "#closeAccount") == 0)
{
 closeAccount(arr[1]);
}
else if (strcmp(arr[0], "#deposit") == 0)
{
 deposit(arr[1], arr[2]);
}
else if (strcmp(arr[0], "#withdraw") == 0)
{
 withdraw(arr[1], arr[2]);
}
else if (strcmp(arr[0], "#transfer") == 0)
{
 transfer(arr[1], arr[2], arr[3]);
}
else if (strcmp(arr[0], "#accountSummary") == 0)
{
 accountSummary(arr[1]);
}
else if (strcmp(arr[0], "#reportA") == 0)
{
 reportA();
}
else if (strcmp(arr[0], "#reportB") == 0)
{
 reportB(arr[1], arr[2]);
}
else
  {
    printf("Could not find function to batch_execute: %s", arr[0]);
  }
  printf("\n");
}
}

/**
* Run batch input given filename.
* @param filename name of properties file
*/
static void batch_run(char filename[])
{
  // open file
  FILE *fp = fopen(filename, "r");
  // print error if file cannot be opened
  if (fp == NULL)
  {
    printf("Cannot open properties file %s\n", filename);
  }
  else
  {
    int batch_mode = 0;
    char *cur_line = (char *) malloc(256);
    // read each line
    while ( fscanf(fp, "%s", cur_line) != EOF)
    {
      char *line_copy = (char *) malloc(256);
      char *token;
      // copy current line
      strcpy(line_copy, cur_line);
    if (batch_mode == 0)
    {
      // tokenize line and find batch key
      while ( (token = strsep(&line_copy, "=")) != NULL )
      {
        if ( strcmp(token, BATCH_KEY) == 0)
        {
          batch_mode = 1;
        }
        else
        {
          break;
        }
      }
    }
    else if (batch_mode == 1)
    {
      char *token;
      char **token_arr = (char **) malloc(sizeof(char*) * 1);
      int token_cnt = 0;
      // get each token and save to array
      while ( (token = strsep(&line_copy, ",")) != NULL )
      {
        token_arr = (char **) realloc(token_arr, (token_cnt + 1) * sizeof(char*));
        token_arr[token_cnt] = (char *) malloc( strlen(token) + 1 );
        strcpy(token_arr[token_cnt], token);
        token_cnt++;
      }
      // run function
      batch_execute(token_arr, token_cnt);
    }
  }
}
// close file
fclose(fp);
void * getLine (char * buff, size_t sz) {
  if (fgets(buff, sz, stdin) != NULL) {
    size_t len = strlen(buff);
    if (len > 0 && buff[len-1] == '\n')
      buff[len-1] = '\0';
    else {
      int ch;
      while((ch = getc(stdin)) != EOF && ch != '\n');
    }
  }
  return 0;
}

int validateInput (char * input, char s) {
  char temp = tolower(*input);

  switch(s) {
    case 1:
      if(temp == 'm' || temp == 'f') {
        return 1;
      }
      return 0;
    break;
    case 2:
      if(strtol(input, (char**)NULL, 10) >= 0) {
        return 1;
      }
      return 0;
    break;
    case 3:
      if(temp == 'c' || temp == 's') {
        return 1;
      }
      return 0;
    break;
    default:
      return 0;
    break;
  }
}


int main_menu_options(char * choice, char * currentCustomer) {
  int valid = 0;
  char name[20];
  char gender[2];
  char age[3];
  char pin[4];
  char id[5];
  char temp;

  switch(strtol(choice, (char**)NULL, 10)) {
    case 1:
      printf("\nEnter Name:");
      getLine(name, sizeof(name));
      puts(name);
      valid = 0;
      while(valid == 0) {
        printf("\nEnter Gender(M/F):");
        getLine(gender, sizeof(gender));
        for(size_t i = 0; i < 2; i++) {
          gender[i] = toupper(gender[i]);
        }
        valid = validateInput(gender, 1);
      }
      valid = 0;
      while(valid == 0) {
        printf("\nEnter Age:");
        getLine(age, sizeof(age));
        valid = validateInput(age, 2);
}
valid = 0;
while(valid == 0) {
printf("\nEnter Positive PIN:");
getLine(pin, sizeof(pin));
valid = validateInput(pin, 2);
}
if (valid == 1) {
printf("\nUpdating Database");
newCustomer(name, gender, age, pin);
}
return 1;
break;
case 2:
printf("\nLog In");
valid = 0;
while(valid == 0) {
printf("\nEnter Customer ID:");
getLine(id, sizeof(id));
valid = validateInput(id, 2);
}
valid = 0;
while(valid == 0) {
printf("\nEnter PIN:");
getLine(pin, sizeof(pin));
valid = validateInput(pin, 2);
}
if (valid == 1) {
printf("\nQuerying Database");
valid = authCustomer(id, pin);
if (strtol(id, (char**)NULL, 10) == 0 && strtol(pin, (char**)NULL, 10) == 0){
return 3;
}
if (valid == 1) {
strcpy(currentCustomer, id);
return 2;
}
}
return 1;
break;
case 3:
printf("\nBye!\n");
return 0;
break;
default:
printf("\nNot an Option");
return 1;
break;
}
}

int customer_menu_options(char * choice, char * currentCustomer) {
int valid = 0;
char name[20];
char gender[2];
char age[3];
char pin[4];
char id[10];
char accountType[2];
char depositAmm[20];
char amount[20];
char number[10];

printf("\nWelcome %s",currentCustomer);
switch(strtol(choice, (char**)NULL, 10)) {
   case 1:
     valid = 0;
     while(valid == 0) {
       printf("\nEnter Customer ID:");
       getLine(id, sizeof(id));
       valid = validateInput(id, 2);
     }
     valid = 0;
     while(valid ==0) {
       printf("\nAccount Type(S/C):");
       getLine(accountType, sizeof(accountType));
       for(size_t i = 0; i < 2; i++) {
         accountType[i] = toupper(accountType[i]);
       }
       valid = validateInput(accountType, 3);
     }
     valid = 0;
     while(valid == 0) {
       printf("\nEnter Initial Deposit:");
       getLine(depositAmm, sizeof(depositAmm));
       valid = validateInput(depositAmm, 2);
     }
     if (valid == 1) {
       printf("\nUpdating Database");
       openAccount(id, accountType, depositAmm);
     }
     return 2;
   break;
   case 2:
     valid = 0;
     while(valid == 0) {
       printf("\nEnter Account #:");
       getLine(number, sizeof(number));
       valid = validateInput(number, 2);
     }
     if (valid == 1) {
       printf("\nUpdating Database");
       if (findAccount(currentCustomer, number)) {
         closeAccount(number);
       }
     }
     return 2;
   break;
   case 3:
     valid = 0;
     while(valid == 0) {
       printf("\nEnter Account #:");
       getLine(number, sizeof(number));
       valid = validateInput(number, 2);
     }
     valid = 0;
     while(valid == 0) {
       printf("\nDeposit Amount:");
       getLine(amount, sizeof(amount));
       valid = validateInput(amount, 2);
     }
     if (valid == 1) {
       printf("\nUpdating Database");
       deposit(number, amount);
     }
     return 2;
   break;
   case 4:
     valid = 0;
     while(valid == 0) {
       printf("\nEnter Account #:");
           getLine(number, sizeof(number));
           valid = validateInput(number, 2);
         }
         valid = 0;
         while(valid == 0) {
           printf("\nWithdraw Amount:");
           getLine(amount, sizeof(amount));
           valid = validateInput(amount, 2);
         }
         if (valid == 1) {
           printf("\nUpdating Database");
           if (findAccount(currentCustomer, number)) {
             withdraw(number, amount);
           }
         }
         return 2;
       break;
       case 5:
         valid = 0;
         while(valid == 0) {
           printf("\nEnter Source Account #:");
           getLine(id, sizeof(id));
           valid = validateInput(id, 2);
         }
         valid = 0;
         while(valid == 0) {
           printf("\nEnter Destination Account #:");
           getLine(number, sizeof(number));
           valid = validateInput(number, 2);
         }
         valid = 0;
         while(valid == 0) {
           printf("\nEnter Transfer Amount:");
           getLine(depositAmm, sizeof(depositAmm));
           valid = validateInput(depositAmm, 2);
         }
         if (valid == 1) {
           printf("\nUpdating Database");
           if (findAccount(currentCustomer, id)) {
             transfer(id, number, depositAmm);
           }
         }
         return 2;
       break;
       case 6:
         printf("\nQuerying Database");
         accountSummary(currentCustomer);
         return 2;
       break;
       case 7:
         printf("\nLogging Out\n");
         return 1;
       break;
       default:
         return 2;
       break;
     }
   }

   int administrator_menu_options(char * choice) {
     int valid = 0;
     char id[10];
     char ageMin[3];
     char ageMax[3];

     switch(strtol(choice, (char**)NULL, 10)) {
       case 1:

       valid = 0;
        while(valid == 0) {
          printf("\nEnter Customer ID:");
          getLine(id, sizeof(id));
          valid = validateInput(id, 2);
        }
        if (valid == 1) {
          printf("\nQuerying Database");
          accountSummary(id);
        }
        return 3;
      break;
      case 2:
        printf("\nQuerying Database");
        reportA();
        return 3;
      break;
      case 3:
        valid = 0;
        while(valid == 0) {
          printf("\nEnter Min Age:");
          getLine(ageMin, sizeof(ageMin));
          valid = validateInput(ageMin, 2);
        }
        valid = 0;
        while(valid == 0) {
          printf("\nEnter Max Age:");
          getLine(ageMax, sizeof(ageMax));
          valid = validateInput(ageMax, 2);
        }
        if (valid) {
          printf("\nQuerying Database");
          reportB(ageMin, ageMax);
        }
        return 3;
      break;
      case 4:
        printf("\nLogging Out\n");
        return 1;
      break;
      default:
        return 3;
      break;
    }
  }
  void print_menu(char menu) {
    switch(menu){
      case 1:
        printf("\nMain Menu");
        printf("\n1. New Customer");
        printf("\n2. Customer Login");
        printf("\n3. Exit");
        printf("\nEnter Option Number:");
      break;
      case 2:
        printf("\nCustomer Main Menu");
        printf("\n1. Open Account");
        printf("\n2. Close Account");
        printf("\n3. Deposit");
        printf("\n4. Withdraw");
        printf("\n5. Transfer");
        printf("\n6. Account Summary");
        printf("\n7. Exit");
        printf("\nEnter Option Number:");
      break;
      case 3:
         printf("\nAdministrator Main Menu");
         printf("\n1. Account Summary for Customer");
         printf("\n2. Report A :: Customer Information with Total Balance in Decreasing Order");
         printf("\n3. Report B :: Find the Average Total Balance Between Age Groups");
         printf("\n4. Exit");
         printf("\nEnter Option Number:");
       break;
       default:break;
     }
   }

   void start_ui(void) {
     /* state
       done = 0
       main menu = 1
       authenticated = 2
       admin = 3
     */
     int state = 1;
     char currentCustomer[5];
     char input[5];

     while(state == 1) {
       print_menu(1);
       getLine(input, sizeof(input));
       state = main_menu_options(input, currentCustomer);

       while(state == 2) {
         print_menu(2);
         getLine(input, sizeof(input));
         state = customer_menu_options(input, currentCustomer);
       }

       while (state == 3) {
         print_menu(3);
         getLine(input, sizeof(input));
         state = administrator_menu_options(input);
       }

     }
   }

   int main(int argc, char *argv[])
   {
     if (argc < 2)
     {
       printf("Need properties file\n");
     }
     else
     {
       init(argv[1]);
       test_connection();

       open_db();
       batch_run(argv[1]);
       start_ui();
       close_db();
     }
     return 0;
   }
